"""Data logging classes."""

from __future__ import annotations
from typing import Any
import os
import time
import xarray as xr
from paramdb import ParamDB


class DataLogger:
    """
    Base data logger to generate :py:class:`GraphLogger` objects that use the given
    ParamDB and log directory (to save log files in).
    """

    def __init__(self, param_db: ParamDB[Any], log_directory: str) -> None:
        """
        Create a base data logger using the given ParamDB object and log directory.
        """
        self._param_db = param_db
        self._log_directory = log_directory
        if not os.path.exists(self.directory):
            os.mkdir(self.directory)

    def _commit_id_or_latest(
        self, commit_id: int | None, param_db: ParamDB[Any] | None = None
    ) -> int:
        """
        If the given commit ID is None, return the latest commit ID from the ParamDB.
        Otherwise, return the given commit ID.

        If a ParamDB is given, that will be used instead of ``self._param_db`` (which
        allows this function to be used in ``__init__`` before ``self._param_db`` is
        defined).
        """
        param_db = param_db or self._param_db
        if commit_id is None:
            latest_commit = param_db.latest_commit
            if latest_commit is None:
                raise IndexError(
                    "cannot tag log with most recent commit because ParamDB at"
                    f" '{param_db.path}' is empty"
                )
            commit_id = latest_commit.id
        return commit_id

    @property
    def directory(self) -> str:
        """Directory where this logger saves subdirectories or files."""
        return self._log_directory

    def graph(
        self, graph_description: str, graph_commit_id: int | None = None
    ) -> GraphLogger:
        """
        Generate a :py:class:`GraphLogger` with the given description and commit ID,
        which are used to uniquely identify the graph.

        If no commit ID is given, the latest commit ID at the time this function is
        called will be used.
        """
        return GraphLogger(
            self._param_db, self._log_directory, graph_description, graph_commit_id
        )


class GraphLogger(DataLogger):
    """
    Data logger associated with a particular graph to generate :py:class:`NodeLogger`
    objects that use the same graph name and directory.

    A description and commit ID are used to uniquely identify the graph. If no commit ID
    is given, the latest commit ID at the time this object is created will be used.

    Typically generated by :py:meth:`DataLogger.graph`.
    """

    def __init__(
        self,
        param_db: ParamDB[Any],
        log_directory: str,
        graph_description: str,
        graph_commit_id: int | None = None,
    ) -> None:
        self._graph_description = graph_description
        self._graph_commit_id = self._commit_id_or_latest(graph_commit_id, param_db)
        super().__init__(param_db, log_directory)

    @property
    def graph_name(self) -> str:
        """
        Name of the graph, composed of the commit ID and description. Used for the graph
        log directory and saved in each log's metadata.
        """
        return f"graph_{self._graph_commit_id}_{self._graph_description}"

    @property
    def directory(self) -> str:
        return os.path.join(super().directory, self.graph_name)

    def node(
        self, node_description: str, node_commit_id: int | None = None
    ) -> NodeLogger:
        """
        Generate a :py:class:`NodeLogger` with the given description and commit ID,
        which are used to uniquely identify the node.

        If no commit ID is given, the latest commit ID at the time this function is
        called will be used.
        """
        return NodeLogger(
            self._param_db,
            self._log_directory,
            self._graph_description,
            node_description,
            self._graph_commit_id,
            node_commit_id,
        )


class NodeLogger(GraphLogger):
    """
    Data logger associated with a particular node to generate log files that use the
    same node name and directory.

    A description and commit ID are used to uniquely identify the node. If no commit ID
    is given, the latest commit ID at the time this object is created will be used.

    Typically generated by :py:meth:`GraphLogger.node`.
    """

    # pylint: disable-next=too-many-arguments
    def __init__(
        self,
        param_db: ParamDB[Any],
        log_directory: str,
        graph_description: str,
        node_description: str,
        graph_commit_id: int | None = None,
        node_commit_id: int | None = None,
    ) -> None:
        self._node_description = node_description
        self._node_commit_id = self._commit_id_or_latest(node_commit_id, param_db)
        super().__init__(param_db, log_directory, graph_description, graph_commit_id)

    @property
    def node_name(self) -> str:
        """
        Name of the node, composed of the commit ID and description. Used for the node
        log directory and saved in each log's metadata.
        """
        return f"node_{self._node_commit_id}_{self._node_description}"

    @property
    def directory(self) -> str:
        return os.path.join(super().directory, self.node_name)

    def _log_filename(
        self, log_type: str, log_description: str, log_commit_id: int
    ) -> str:
        return os.path.join(
            self.directory, f"{log_commit_id}_{log_type}_{log_description}.nc"
        )

    def log(
        self, log_description: str, analysis: bool = False, commit_id: int | None = None
    ) -> xr.Dataset:
        """
        Log the given data. Construct an Xarray ``Dataset``, save it in a NetCDF file,
        and return the ``Dataset``.

        The filename will include the given description, commit ID, and log type ("data"
        by default, or "analysis" if ``analysis`` is True). If no commit ID is given,
        the latest commit ID at the time this function is called will be used.

        The name of the graph and node, the log type (data or analysis), the ParamDB
        path, the commit ID, and the timestamp for when this log was created are stored
        in `attrs`.
        """
        log_type = "analysis" if analysis else "data"
        commit_id = self._commit_id_or_latest(commit_id)
        dataset = xr.Dataset(
            attrs={
                "graph": self.graph_name,
                "node": self.node_name,
                "log_type": log_type,
                "paramdb_path": os.path.abspath(self._param_db.path),
                "paramdb_commit_id": commit_id,
                "created_timestamp": time.time(),
            },
        )
        log_filename = self._log_filename(log_type, log_description, commit_id)
        if os.path.exists(log_filename):
            raise FileExistsError(
                f"{log_type} log '{log_description}' for {self.graph_name},"
                f" {self.node_name}, commit {commit_id} already exists"
            )
        dataset.to_netcdf(log_filename)
        return dataset
